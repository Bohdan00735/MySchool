Index: models/Mark.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const connection = require(\"../config/Connection\").connection\nconst course = require('./Course')\nconst user = require('./User')\nconst userInfo = require('./UserInfo')\n/** Class representing a mark configuration. */\nclass MarkConfig{\n    constructor(lesson_name, date, teacher_name, value) {\n        this.lesson_name = lesson_name\n        this.date = date\n        this.teacher_name = teacher_name\n        this.value = value\n    }\n}\n\n/** Class representing a mark. */\nclass Mark{\n    /**\n     * Create a class.\n     * @param {number} id - The id value.\n     * @param {number} value - The mark value.\n     * @param {date} date - The date value.\n     * @param {string} notes - The notes value.\n     * @param {number} courseId - The courseId value.\n     * @param {number} studentId - The studentId value.\n     * @param {number} teacherId - The teacherId value.\n     */\n    constructor(id,value,date,notes,courseId,studentId,teacherId) {\n        this.id = id\n        this.value = value\n        this.date = date\n        this.notes = notes\n        this.courseId = courseId\n        this.studentId = studentId\n        this.teacherId = teacherId\n    }\n}\n/**\n * Add mark to data base.\n * @return void\n */\nmodule.exports.addMark = function (mark) {\n    const script = 'INSERT INTO marks(idMark, value, date,notes,courseId, studentId,teacherId) VALUES(?,?,?,?,?,?,?)'\n    connection.query(script,[mark.id,mark.value,mark.date,mark.notes,mark.courseId,mark.studentId,mark.teacherId], function(err, results) {\n        if(err) throw err;\n        console.log(results);\n    });\n}\n/**\n * Edit mark value in data base.\n * @return void\n */\nmodule.exports.editMarkValue = function (newValue, markId) {\n    const script = 'UPDATE marks SET value=? WHERE idMark=?'\n    connection.query(script,[newValue, markId], function(err, results) {\n        if(err) throw err;\n        console.log(results);\n    });\n}\n/**\n * Edit date of mark in data base.\n * @return void\n */\nmodule.exports.editMarkDate = function (newDate, markId) {\n    const script = 'UPDATE marks SET date=? WHERE idMark=?'\n    connection.query(script,[newDate, markId], function(err, results) {\n        if(err) throw err;\n        console.log(results);\n    });\n}\n/**\n * Edit notes for mark in data base.\n * @return void\n */\nmodule.exports.editMarkNotes = function (newNotes, markId) {\n    const script = 'UPDATE marks SET notes=? WHERE idMark=?'\n    connection.query(script,[newNotes, markId], function(err, results) {\n        if(err) throw err;\n        console.log(results);\n    });\n}\n/**\n * Edit courseId for mark in data base.\n * @return void\n */\nmodule.exports.editMarkCourseId = function (newCourse, markId) {\n    const script = 'UPDATE marks SET courseId=? WHERE idMark=?'\n    connection.query(script,[newCourse, markId], function(err, results) {\n        if(err) throw err;\n        console.log(results);\n    });\n}\n/**\n * Edit studentId for mark in data base.\n * @return void\n */\nmodule.exports.editMarkStudentId = function (newStudent, markId) {\n    const script = 'UPDATE marks SET studentId=? WHERE idMark=?'\n    connection.query(script,[newStudent, markId], function(err, results) {\n        if(err) throw err;\n        console.log(results);\n    });\n}\n/**\n * Edit teacherId for mark in data base.\n * @return void\n */\nmodule.exports.editMarkTeacherId = function (newTeacherId, markId) {\n    const script = 'UPDATE marks SET teacherId=? WHERE idMark=?'\n    connection.query(script,[newTeacherId, markId], function(err, results) {\n        if(err) throw err;\n        console.log(results);\n    });\n}\n\nfunction getAllMarksOfStudent(studentId, callback) {\n    connection.query('SELECT * FROM  marks WHERE studentId=?',studentId,function(err, results){\n        callback(results,err)\n    });\n}\n/**\n * Get all marks of specific student by course\n * from data base.\n * @return callback function\n */\nmodule.exports.getAllMarksOfStudentByCourse = function(studentId, courseId, callback) {\n    connection.query('SELECT * FROM  marks WHERE studentId=?, courseId=?',[studentId, courseId],function(err, results){\n        callback(results,err)\n    });\n}\n\n/**\n * Get all marks by specific course from data base.\n * @return callback function\n */\nmodule.exports.getAllMarksOfByCourse = function (courseId, callback) {\n    connection.query('SELECT * FROM  marks WHERE courseId=?', courseId,function(err, results){\n        callback(results,err)\n    });\n}\n/**\n * Calculate average value of all marks\n * of specific student by course from data base.\n * @return callback function\n */\nmodule.exports.calculateMiddleMark = function(id,callback){\n    getAllMarksOfStudent(id, function (info, err) {\n        let marks = info\n        var result = 0;\n        try {\n            marks.forEach(mark=>result+=mark.value)\n            callback(mark)\n        }catch (e) {\n            callback(marks.value)\n        }\n\n    })\n}\n/**\n * Configure a table with marks\n * of specific student by course from data base.\n * @return callback function\n */\nmodule.exports.configMarksTableForUser = function (id, callback) {\n    getAllMarksOfStudent(id, function (info, err) {\n        let mark = info\n        let table = []\n\n        mark.forEach(element =>\n            course.getCourse(element.courseId, function (lesson, error) {\n                user.getUser(element.teacherId, function (teacher, error) {\n                    userInfo.getUserInfo(teacher[0].idUserInfo, function (info,err) {\n                        table.push(new MarkConfig(lesson[0].info,element.date,info[0].name,element.value))\n                    })\n                })\n            }))\n\n        setTimeout(()=>callback(table), 1000)\n\n        /*course.getCourse(info.courseId, function (lesson, error) {\n            user.getUser(info.teacherId, function (teacher, error) {\n                callback([new MarkConfig(lesson,info.date,teacher,info.value)])\n            })\n        })*/\n    })\n\n}\n\nmodule.exports.getAllMarksOfStudent = getAllMarksOfStudent\nmodule.exports.Mark = Mark\nmodule.exports.MarkConfig = MarkConfig
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- models/Mark.js	(revision 54f79f649a93cf7b071944651d664490dc5382b6)
+++ models/Mark.js	(date 1590919628801)
@@ -148,7 +148,7 @@
         var result = 0;
         try {
             marks.forEach(mark=>result+=mark.value)
-            callback(mark)
+            setTimeout(()=>callback(result), 500)
         }catch (e) {
             callback(marks.value)
         }
Index: models/Task.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const connection = require(\"../config/Connection\").connection\n\nclass TaskForm{\n\n    constructor(deadline,text, subject) {\n        this.deadline = deadline\n        this.text = text\n        this.subject = subject\n    }\n}\n\n\n/** Class representing a task. */\nmodule.exports = class Task {\n    /**\n     * Create a task.\n     * @param {number} id - The id value.\n     * @param {date} deadline - The deadline date value.\n     * @param {string} text - The task text value.\n     * @param {string} progress - The task description value.\n     * @param {number} studentId - The studentId value.\n     * @param {number} courseId - The courseId value.\n     */\n    constructor(id, deadline, text,progress, studentId, courseId) {\n        this.id = id\n        this.deadline = deadline\n        this.text = text\n        this.progress = progress\n        this.studentId = studentId\n        this.courseId = courseId\n    }\n}\n/**\n * Add task to data base.\n * @return void\n */\nmodule.exports.addTask = function (task) {\n    const sql = `INSERT INTO tasks(idtask, deadline, text,progress, studentId,courseId) VALUES(?,?,?,?,?)`;\n\n    connection.query(sql,[task.id,task.deadline,task.text,task.progress,task.studentId,task.courseId], function(err, results) {\n        if(err) throw err;\n        console.log(results);\n    });\n}\n/**\n * Edit task deadline in data base.\n * @return void\n */\nmodule.exports.editTaskDeadline = function (newDeadline, id) {\n    const script = 'UPDATE tasks SET deadline=? WHERE idtask=?'\n    connection.query(script,[newDeadline, id], function(err, results) {\n        if(err) throw err;\n        console.log(results);\n    });\n}\n/**\n * Edit task text in data base.\n * @return void\n */\nmodule.exports.editTaskText = function (newText, id) {\n    const script = 'UPDATE tasks SET text=? WHERE idtask=?'\n    connection.query(script,[newText, id], function(err, results) {\n        if(err) throw err;\n        console.log(results);\n    });\n}\n/**\n * Edit task deadline in data base.\n * @return void\n */\nmodule.exports.editTaskDeadline = function (progress, id) {\n    const script = 'UPDATE tasks SET progress=? WHERE idtask=?'\n    connection.query(script,[progress, id], function(err, results) {\n        if(err) throw err;\n        console.log(results);\n    });\n}\n/**\n * Get student's task from data base.\n * @return callback function\n */\nmodule.exports.getTasksForStudent = function (studentId, callback) {\n    connection.query('SELECT * FROM  tasks WHERE studentId=?',studentId,function(err, results){\n        callback(results, err)\n    });\n}\n/**\n * Get all tasks by course from data base.\n * @return callback function\n */\nmodule.exports.getAllTasksByCourse = function (courseId, callback) {\n    connection.query('SELECT * FROM  tasks WHERE courseId=?',courseId,function(err, results){\n        callback(results[0], err)\n    });\n}\n/**\n * Delete task from data base.\n * @return void\n */\n\nfunction getAllDoneTasksForStudent(studentId, callback) {\n    connection.query('SELECT * FROM  tasks WHERE progress=1',function(err, results){\n        callback(results, err)\n    });\n}\n\nfunction getUnfulfilledTasksForUser(studentId, callback){\n    connection.query('SELECT * FROM  tasks WHERE studentId=?, progress=0',studentId,function(err, results){\n        callback(results, err)\n    });\n}\n\nmodule.exports.deleteTask = function (id) {\n    const sql = 'DELETE FROM tasks WHERE idtask=?'\n    connection.query(sql,id, function(err, results) {\n        if(err) throw err;\n        console.log(results);\n    });\n}\n\nmodule.exports.makeTableWithDoneTasks = function(studentId,callback){\n    getAllDoneTasksForStudent(studentId, function (tasks, err) {\n        let table = []\n        tasks.forEach(task =>\n            course.getNameOfTheCourse(task.courseId, function (course,err) {\n                table.push(new TaskForm(task.deadline, task.text, course[0].info))\n            })\n        )\n        callback(table)\n    })\n}\n\nmodule.exports.makeTableUnfulfilledTasksForUser = function(studentId,callback){\n    getUnfulfilledTasksForUser(studentId, function (tasks, err) {\n        let table = []\n        tasks.forEach(task =>\n            course.getNameOfTheCourse(task.courseId, function (course,err) {\n                table.push(new TaskForm(task.deadline, task.text, course[0].info))\n            })\n        )\n        setTimeout(()=>callback(table),1000)\n    })\n}\n\nmodule.exports.getAllDoneTasksForStudent = getAllDoneTasksForStudent\nmodule.exports.getUnfulfilledTasksForUser = getUnfulfilledTasksForUser
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- models/Task.js	(revision 54f79f649a93cf7b071944651d664490dc5382b6)
+++ models/Task.js	(date 1590919701066)
@@ -126,7 +126,7 @@
                 table.push(new TaskForm(task.deadline, task.text, course[0].info))
             })
         )
-        callback(table)
+        setTimeout(()=>callback(table),1000)
     })
 }
 
