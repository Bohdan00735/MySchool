Index: models/Task.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const connection = require(\"../config/Connection\").connection\nconst course = require('./Course')\n\nclass TaskForm{\n\n    constructor(deadline,text, subject) {\n        this.deadline = deadline\n        this.task = text\n        this.lesson_name = subject\n    }\n}\n\n\n/** Class representing a task. */\nmodule.exports = class Task {\n    /**\n     * Create a task.\n     * @param {number} id - The id value.\n     * @param {date} deadline - The deadline date value.\n     * @param {string} text - The task text value.\n     * @param {string} progress - The task description value.\n     * @param {number} studentId - The studentId value.\n     * @param {number} courseId - The courseId value.\n     */\n    constructor(id, deadline, text,progress, studentId, courseId) {\n        this.id = id\n        this.deadline = deadline\n        this.text = text\n        this.progress = progress\n        this.studentId = studentId\n        this.courseId = courseId\n    }\n}\n/**\n * Add task to data base.\n * @return void\n */\nmodule.exports.addTask = function (task) {\n    const sql = `INSERT INTO tasks(idtask, deadline, text,progress, studentId,courseId) VALUES(?,?,?,?,?)`;\n\n    connection.query(sql,[task.id,task.deadline,task.text,task.progress,task.studentId,task.courseId], function(err, results) {\n        if(err) throw err;\n        console.log(results);\n    });\n}\n/**\n * Edit task deadline in data base.\n * @return void\n */\nmodule.exports.editTaskDeadline = function (newDeadline, id) {\n    const script = 'UPDATE tasks SET deadline=? WHERE idtask=?'\n    connection.query(script,[newDeadline, id], function(err, results) {\n        if(err) throw err;\n        console.log(results);\n    });\n}\n/**\n * Edit task text in data base.\n * @return void\n */\nmodule.exports.editTaskText = function (newText, id) {\n    const script = 'UPDATE tasks SET text=? WHERE idtask=?'\n    connection.query(script,[newText, id], function(err, results) {\n        if(err) throw err;\n        console.log(results);\n    });\n}\n/**\n * Edit task deadline in data base.\n * @return void\n */\nmodule.exports.editTaskDeadline = function (progress, id) {\n    const script = 'UPDATE tasks SET progress=? WHERE idtask=?'\n    connection.query(script,[progress, id], function(err, results) {\n        if(err) throw err;\n        console.log(results);\n    });\n}\n/**\n * Get student's task from data base.\n * @return callback function\n */\nmodule.exports.getTasksForStudent = function (studentId, callback) {\n    connection.query('SELECT * FROM  tasks WHERE studentId=?',studentId,function(err, results){\n        callback(results, err)\n    });\n}\n/**\n * Get all tasks by course from data base.\n * @return callback function\n */\nmodule.exports.getAllTasksByCourse = function (courseId, callback) {\n    connection.query('SELECT * FROM  tasks WHERE courseId=?',courseId,function(err, results){\n        callback(results[0], err)\n    });\n}\n/**\n * Delete task from data base.\n * @return void\n */\n\nfunction getAllDoneTasksForStudent(studentId, callback) {\n    connection.query('SELECT * FROM  tasks WHERE studentId=? AND progress=1',studentId,function(err, results){\n        callback(results, err)\n    });\n}\n\nfunction getUnfulfilledTasksForUser(studentId, callback){\n    connection.query('SELECT * FROM  tasks WHERE studentId=? AND progress=0',studentId,function(err, results){\n        callback(results, err)\n    });\n}\n\nmodule.exports.deleteTask = function (id) {\n    const sql = 'DELETE FROM tasks WHERE idtask=?'\n    connection.query(sql,id, function(err, results) {\n        if(err) throw err;\n        console.log(results);\n    });\n}\n\nmodule.exports.makeTableWithDoneTasks = function(studentId,callback){\n    getAllDoneTasksForStudent(studentId, function (tasks, err) {\n        let table = []\n        tasks.forEach(task =>\n            course.getNameOfTheCourse(task.courseId, function (course,err) {\n                table.push(new TaskForm(task.deadline, task.text, course[0].info))\n            })\n        )\n        setTimeout(()=>callback(table),1000)\n    })\n}\n\nmodule.exports.makeTableUnfulfilledTasksForUser = function(studentId,callback){\n    getUnfulfilledTasksForUser(studentId, function (tasks, err) {\n        let table = []\n        tasks.forEach(task =>\n            course.getNameOfTheCourse(task.courseId, function (course,err) {\n                table.push(new TaskForm(task.deadline, task.text, course[0].info))\n            })\n        )\n        setTimeout(()=>callback(table),1000)\n    })\n}\n\nmodule.exports.getAllDoneTasksForStudent = getAllDoneTasksForStudent\nmodule.exports.getUnfulfilledTasksForUser = getUnfulfilledTasksForUser
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- models/Task.js	(revision 5ab2fee8f61fc2f6869c966fb3a9ffe52d74e697)
+++ models/Task.js	(date 1590921254705)
@@ -136,6 +136,7 @@
         let table = []
         tasks.forEach(task =>
             course.getNameOfTheCourse(task.courseId, function (course,err) {
+
                 table.push(new TaskForm(task.deadline, task.text, course[0].info))
             })
         )
